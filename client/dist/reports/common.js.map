{"version":3,"sources":["./src/app/services/forms/forms.service.ts"],"names":[],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAA2C;;AAOpC,MAAM,YAAY;IAGrB;IAAgB,CAAC;IAGjB,iBAAiB,CAAC,OAAoB;QAClC,IAAI,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACvD,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAID,YAAY,CAAC,KAAsB;QAC/B,OAAO;YACH,UAAU,EAAE,KAAK,CAAC,KAAK;YACvB,YAAY,EAAE,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO;SAC/C;IACL,CAAC;;wEApBQ,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFT,MAAM;6FAET,YAAY;cAHxB,wDAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB","file":"common.js","sourcesContent":["\r\nimport { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormControl } from '@angular/forms';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FormsService {\r\n\r\n\r\n    constructor() { }\r\n\r\n\r\n    formControlStatus(control: FormControl): boolean {\r\n        if (control.invalid && (control.dirty || control.touched)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    displayClass(input: AbstractControl): { [key: string]: boolean } {\r\n        return {\r\n            'is-valid': input.valid,\r\n            'is-invalid': input.touched && input.invalid\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //  displayErrorMessage(control: FormControl): string {\r\n    //     if (control.hasError('required')) {\r\n    //         return 'This field is reqiured';\r\n    //     }\r\n    //     else if (control.hasError('minlength')) {\r\n    //         return 'To short';\r\n    //     }\r\n    //     else if (control.hasError('pattern')) {\r\n    //         return 'Invalid Pattern';\r\n    //     }\r\n    //     return '';\r\n    // }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}